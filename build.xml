<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2009-2010 Swedish Meteorological and Hydrological Institute, SMHI,

This file is part of the Beast library.

Beast library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Beast library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the Beast library library.  If not, see http://www.gnu.org/licenses.
/opt/testbuilds/baltrad-db/baltrad/db-devel

-->
<project name="beast" default="build" basedir=".">
  <property file="build.properties" />

  <property name="app.name" value="beast" />
  <property name="app.version" value="0.1-dev" />
  <property name="app.root.dir" value="${basedir}" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="build.classes.dir" value="${build.dir}/classes" />
  <property name="build.test.dir" value="${build.dir}/test" />
  <property name="build.itest.dir" value="${build.dir}/itest" />
  <property name="build.coverage.dir" value="${build.dir}/coverage" />
  <property name="build.instrument.dir" value="${build.dir}/instrument" />
  <property name="dist.dir" value="${basedir}/dist" />
  <property name="source.dir" value="${basedir}/src" />
  <property name="lib.dir" value="${basedir}/lib" />	
  <property name="etc.dir" value="${basedir}/etc" />
  <property name="examples.dir" value="${basedir}/examples" />
  <property name="compile.debug" value="true" />
  <property name="compile.optimize" value="true" />
  <property name="compile.includeAntRuntime" value="no" />

  <property file="develop.properties" />
  <property name="prefix" value="/opt/baltrad" />

  <property file="${etc.dir}/testdb.properties" />

  <!-- override this with -Dbaltraddb.path= -->
  <property name="baltraddb.path" value="/opt/baltrad/db-devel"/>
  <property name="baltraddb.bin.path" value="${baltraddb.path}/bin"/>

  <available file="${baltraddb.path}" type="dir" property="baltraddb.available"/>
  <available file="${baltraddb.path}/share/baltrad-bdb/java/baltrad-bdb-client.jar" property="baltrad-bdb-client.jar.available"/>
  <available file="${baltraddb.bin.path}/baltrad-bdb-server" property="baltrad-bdb-server.available"/>

  <fail unless="baltrad-bdb-client.jar.available" message="Can not find baltrad-bdb-client.jar!" />
  <fail unless="baltrad-bdb-server.available" message="Can not find baltrad-bdb-server executable" />

  <fail unless="blt.db.path" message="No storage root path defined (blt.db.path)!"/>
	
  <path id="lib.path">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
      <exclude name="ant/*.jar" />
      <exclude name="junit/*.jar"/>
      <exclude name="easymock/*.jar"/>
      <exclude name="emma/*.jar"/>
      <exclude name="cglib/*.jar"/>
    </fileset>
    <fileset dir="${baltraddb.path}/share/baltrad-bdb/java/">
      <include name="baltrad-bdb-client.jar"/>
    </fileset>
    <fileset dir="${baltraddb.path}/share/baltrad-bdb/java/">
      <include name="libs/*.jar"/>
    </fileset>
  </path>

  <path id="test.lib.path">
    <fileset dir="${lib.dir}">
      <include name="junit/*.jar"/>
      <include name="ant-junit/*.jar"/>
      <include name="easymock/*.jar"/>
      <include name="cglib/*.jar"/>
    </fileset>
  </path>

  <path id="doxygen.classpath">
    <fileset dir="${lib.dir}/doxygen">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="emma.classpath" >
    <pathelement location="${lib.dir}/emma/emma.jar" />
    <pathelement location="${lib.dir}/emma/emma_ant.jar" />
  </path>

  <taskdef resource="emma_ant.properties" classpathref="emma.classpath" />

  <!-- Generates the deliverables -->
  <target name="build" depends="clean,compile">
    <mkdir dir="${dist.dir}" />
    <jar jarfile="${dist.dir}/${app.name}.jar"
         basedir="${build.classes.dir}">
    </jar>
  </target>

  <!-- same as running build and execute.test -->
  <target name="distribution" depends="build, execute.test" />

  <target name="-install-files">
  	<mkdir dir="${prefix}/beast" />
  	<mkdir dir="${prefix}/beast/sql" />
  	<mkdir dir="${prefix}/beast/bin" />
  	<mkdir dir="${prefix}/beast/etc" />
  	<mkdir dir="${prefix}/beast/libs" />
  	<mkdir dir="${prefix}/beast/plugins" />
  	<mkdir dir="${prefix}/beast/examples" />
  	<copy todir="${prefix}/beast/sql">
  	  <fileset dir="${etc.dir}">
  	  	<include name="drop_db.sql" />
  	  	<include name="create_db.sql" />
  	  	<include name="upgrade_db.sql" />
  	  </fileset>
  	</copy>
  	<copy todir="${prefix}/beast/libs" flatten="true">
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
        <exclude name="ant/*.jar" />
        <exclude name="junit/*.jar"/>
        <exclude name="easymock/*.jar"/>
        <exclude name="emma/*.jar"/>
      	<exclude name="poi/*.jar"/>
      	<exclude name="dbunit/*.jar"/>
      	<exclude name="spring/spring-test.jar"/>
      </fileset>
  	</copy>
  	<copy todir="${prefix}/beast/etc">
      <fileset dir="${etc.dir}">
        <include name="xmlrpcserver-context.xml" />
        <include name="build-plugin.xml" />
      	<include name="log4j.properties" />
      	<include name="xmlrpcserver.properties" />
      	<include name="beast-log-messages.xml" />
      </fileset>
  	</copy>
  	<copy todir="${prefix}/beast/examples">
	  <fileset dir="${examples.dir}">
	    <include name="*.groovy" />
	    <include name="*.xml" />
	  </fileset>
	</copy>
  	<!-- remove old beast.jar that contained version information -->
  	<delete file="${prefix}/beast/bin/${app.name}-0.1-dev.jar" failonerror="false"/>
  	<copy file="${dist.dir}/${app.name}.jar" todir="${prefix}/beast/bin" />
  	<copy file="${etc.dir}/xmlrpcserver" todir="${prefix}/beast/bin" />
    <chmod file="${prefix}/beast/bin/xmlrpcserver" perm="755"/>
  	<copy file="${etc.dir}/pgfwkplugin" todir="${prefix}/beast/bin" />
    <chmod file="${prefix}/beast/bin/pgfwkplugin" perm="755"/>
  </target>

  <target name="-install-doc-files">
  	<mkdir dir="${prefix}/beast" />
  	<mkdir dir="${prefix}/beast/doc" />
	<mkdir dir="${prefix}/beast/doc/doxygen" />
  	<mkdir dir="${prefix}/beast/doc/javadoc" />
  	<copy todir="${prefix}/beast/doc/doxygen">
      <fileset dir="${dist.dir}/doxygen/html">
        <include name="**/*.*" />
      </fileset>
  	</copy>
    <copy todir="${prefix}/beast/doc/javadoc">
      <fileset dir="${dist.dir}/javadoc">
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>
	
  <target name="install" depends="distribution, -install-files" />
	
  <target name="install-doc" depends="doc, -install-doc-files" />

  <!-- This is the overall build script that can be used to get a full build & test sequence --> 
  <target name="hudson" depends="build,test.coverage" />

  <target name="hudson-install" depends="build,test.coverage,-install-files" />

  <target name="itest" depends="build,execute.itest" />
  <target name="test" depends="build,execute.test" />
	
  <!-- Compile the code -->
  <target name="compile" depends="prepare">
    <mkdir dir="${build.classes.dir}"/>
    <javac srcdir="${source.dir}"
           encoding="8859_1"
           deprecation="on"
           debug="${compile.debug}"
           includeAntRuntime="${compile.includeAntRuntime}"
           optimize="${compile.optimize}"
           destdir="${build.classes.dir}">
      <classpath refid="lib.path"/>
    </javac>
  </target>

  <!-- UNIT TEST PART -->
  <target name="compile.test">
    <mkdir dir="${build.test.dir}"/>
    <javac srcdir="${app.root.dir}/test"
           encoding="8859_1"
           deprecation="on"
           debug="${compile.debug}"
           includeAntRuntime="${compile.includeAntRuntime}"    	
           optimize="${compile.optimize}"
           destdir="${build.test.dir}">
    	<classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath refid="test.lib.path"/>
    </javac>
  	
    <!-- copy any resources -->
    <copy todir="${build.test.dir}">
      <fileset dir="${app.root.dir}/test">
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      	<include name="**/*.groovy"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare.test" depends="compile.test">
    <mkdir dir="${dist.dir}/junit-reports" />
  </target>	
	
  <target name="execute.test" depends="prepare.test">
	<mkdir dir="${dist.dir}/junit-reports" />
	<junit dir="${build.test.dir}" showoutput="true" forkmode="perBatch" printsummary="no" >
	  <jvmarg line="-Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=512m"/>
	  <formatter type="xml"/> 
	  <formatter type="brief" usefile="false" if="test.format.brief" />
	  <classpath refid="test.lib.path"/>
	  <classpath location="${build.classes.dir}"/>
	  <classpath refid="lib.path"/>
	  <classpath location="${build.test.dir}" />
	  <batchtest fork="yes" todir="${dist.dir}/junit-reports">
	    <fileset dir="${build.test.dir}" includes="**/*Test.class" excludes="**/HDF5*.class"/>
	  </batchtest>
	</junit>
  </target>

  <!-- INTEGRATION TEST PART -->
  <target name="compile.itest">
    <mkdir dir="${build.itest.dir}"/>
    <javac srcdir="${app.root.dir}/itest"
           encoding="8859_1"
           deprecation="on"
           debug="${compile.debug}"
           includeAntRuntime="${compile.includeAntRuntime}"    	
           optimize="${compile.optimize}"
           destdir="${build.itest.dir}">
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath refid="test.lib.path"/>
    </javac>

    <!-- copy any resources -->
    <copy todir="${build.itest.dir}">
      <fileset dir="${app.root.dir}/itest">
        <include name="**/*.xml"/>
        <include name="**/*.xls"/>
        <include name="**/*.properties"/>
        <include name="**/*.groovy"/>
      	<include name="**/*.h5"/>
      </fileset>
    </copy>
  </target>	

  <!-- prepares the setup so that it is possible to run the junit integration tests -->
  <target name="prepare.itest" depends="create-testdb, extras-testdb, compile.itest">
	<mkdir dir="${dist.dir}/junit-reports" />
	<copy file="${etc.dir}/testdb.properties" todir="${build.classes.dir}"/>
  </target>

  <target name="create-testdb">
	<sql classpath="${lib.dir}/${db.jar}"
	     driver="${db.driver}"
	     url="${db.url}"
	     userid="${db.user}" 
	     password="${db.pwd}">
	  <transaction src="${etc.dir}/drop_db.sql"/>
	  <transaction src="${etc.dir}/create_db.sql"/>
	</sql>
  </target>

  <target name="extras-testdb">
	<sql classpath="${lib.dir}/${db.jar}"
	     driver="${db.driver}"
	     url="${db.url}"
	     userid="${db.user}" 
	     password="${db.pwd}"
		 escapeprocessing="false"
		 expandproperties="false"
		 delimitertype="row">
	  <transaction src="${etc.dir}/extras_testdb.sql"/>
	</sql>
  </target>

  <target name="start-baltrad-bdb-server">
    <exec executable="${baltraddb.bin.path}/baltrad-bdb-drop"
          failonerror="true">
      <arg value="--conf=${etc.dir}/testdb.properties"/>
    </exec>
    <exec executable="${baltraddb.bin.path}/baltrad-bdb-create"
          failonerror="true">
      <arg value="--conf=${etc.dir}/testdb.properties"/>
    </exec>
    <exec executable="${baltraddb.bin.path}/baltrad-bdb-server"
          failonerror="true">
      <arg value="--conf=${etc.dir}/testdb.properties"/>
      <arg value="--pidfile=${build.dir}/baltrad-bdb-server.pid"/>
      <arg value="--logfile=${build.dir}/baltrad-bdb-server.log"/>
    </exec>
    <exec executable="${baltraddb.bin.path}/baltrad-bdb-client"
          failonerror="true">
      <arg value="import_sources"/>
      <arg value="--url=${blt.db.uri}"/>
      <arg value="${basedir}/etc/itest_sources.xml"/>
    </exec>
  </target>


  <target name="stop-baltrad-bdb-server">
    <exec executable="cat" outputproperty="baltraddb.server.pid">
      <arg value="${build.dir}/baltrad-bdb-server.pid"/>
    </exec>
    <exec executable="kill">
      <arg value="${baltraddb.server.pid}"/>
    </exec>
  </target>
	
  <target name="execute.itest" depends="prepare.itest,start-baltrad-bdb-server">
    <junit dir="${build.itest.dir}" showoutput="true" forkmode="perBatch" printsummary="no" >
      <jvmarg line="-Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=512m"/>
      <formatter type="xml"/> 
      <formatter type="brief" usefile="false" if="test.format.brief" />
      <classpath refid="test.lib.path"/>
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath location="${build.itest.dir}" />
      <batchtest fork="yes" todir="${dist.dir}/junit-reports">
        <fileset dir="${build.itest.dir}" includes="**/*Test.class"
                 excludes="eu/baltrad/beast/net/FileUploaderITest.class"/>
      </batchtest>
    </junit>
    <antcall target="stop-baltrad-bdb-server" />
  </target>

  <!-- target that can be used to manually test FileUploader -->
  <target name="execute.itest.fileuploader" depends="compile.itest">
    <java classname="eu.baltrad.beast.net.FileUploaderITest" fork="true">
      <arg value="${itest.fileuploader.src}"/>
      <arg value="${itest.fileuploader.dst}"/>
      <classpath refid="test.lib.path"/>
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath location="${build.itest.dir}" />
    </java>
  </target>

  <!-- CODE COVERAGE -->
  <target name="instrument.coverage">
    <delete dir="${build.instrument.dir}" />
    <delete file="${build.coverage.dir}/coverage.ec" />
    <delete file="${build.coverage.dir}/metadata.emma" />
    <mkdir dir="${build.instrument.dir}" />
    <mkdir dir="${build.coverage.dir}" />

  	<emma enabled="true">
      <instr instrpath="${build.classes.dir}/"
             destdir="${build.instrument.dir}/"	
             metadatafile="${build.coverage.dir}/metadata.emma"
             merge="true"/>
    </emma>
  </target>
  
  <target name="unittest.coverage" depends="instrument.coverage">
    <mkdir dir="${dist.dir}/coverage-reports" />
    <junit dir="${build.test.dir}" showoutput="true" forkmode="perBatch" printsummary="no" >
      <jvmarg line="-d64 -Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=512m"/>
      <sysproperty key="emma.coverage.out.file" file="${build.coverage.dir}/coverage.ec" /> <!-- So I know where ec file is placed -->
      <formatter type="xml"/> 
      <classpath location="${build.instrument.dir}" /> <!-- For instrumentation -->
      <classpath refid="test.lib.path"/>
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath location="${build.test.dir}" />
      <classpath refid="emma.classpath" />
    	
      <batchtest fork="yes" todir="${dist.dir}/junit-reports">
        <fileset dir="${build.test.dir}" includes="**/*Test.class"/>
      </batchtest>
    </junit>

  	<emma enabled="true">
      <report sourcepath="${source.dir}" >
        <fileset dir="${build.coverage.dir}" >
          <include name="*.emma" />
          <include name="*.ec" />
        </fileset>
      	<xml outfile="${dist.dir}/coverage-reports/coverage.xml" depth="method"/>
      </report>
    </emma>
  </target>

  <!-- performs coverage from running all tests (unit tests, integration tests-->
  <target name="test.coverage" depends="prepare.test,prepare.itest,instrument.coverage,start-baltrad-bdb-server">
    <mkdir dir="${dist.dir}/junit-reports" />
    <mkdir dir="${dist.dir}/coverage-reports" />

	<junit dir="${build.test.dir}" showoutput="true" forkmode="perBatch" printsummary="no" >
      <jvmarg line="-d64 -Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=512m"/>
      <sysproperty key="emma.coverage.out.file" file="${build.coverage.dir}/coverage.ec" /> <!-- So I know where ec file is placed -->
      <formatter type="xml"/> 
      <classpath location="${build.instrument.dir}" /> <!-- For instrumentation -->
      <classpath refid="test.lib.path"/>
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath location="${build.test.dir}" />
      <classpath location="${build.itest.dir}" />
      <classpath refid="emma.classpath" />
    	
      <batchtest fork="true" todir="${dist.dir}/junit-reports">
        <fileset dir="${build.test.dir}" includes="**/*Test.class"/>
        <fileset dir="${build.itest.dir}" includes="**/*Test.class"
                 excludes="eu/baltrad/beast/net/FileUploaderITest.class"/>
      </batchtest>
    </junit>

    <antcall target="stop-baltrad-bdb-server" />

  	<emma enabled="true">
      <report sourcepath="${source.dir}" >
        <fileset dir="${build.coverage.dir}" >
          <include name="*.emma" />
          <include name="*.ec" />
        </fileset>
      	<xml outfile="${dist.dir}/coverage-reports/coverage.xml" depth="method"/>
      </report>
    </emma>
  </target>
	
  <!-- clean directories for building -->
  <target name="clean">
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
  </target>
	
  <!-- Prepare for compilation and jar-generation, copy files -->
  <target name="prepare">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.classes.dir}" />
    <mkdir dir="${build.test.dir}" />

  	<!-- Copy misc extra files that resides in the src into classes -->
    <copy todir="${build.classes.dir}" preservelastmodified="true">
      <fileset dir="${source.dir}">
        <include name="**/*.properties"/>
        <include name="**/*.handlers"/>
        <include name="**/*.schemas"/>
        <include name="**/*.xml"/>
        <include name="**/*.dtd"/>
        <include name="**/*.xsd"/>
        <include name="**/*.vm"/>
        <include name="**/*.ftl"/>
        <include name="**/*.types"/>
      </fileset>
    </copy>
  	<mkdir dir="${blt.db.path}" />
  </target>
	
  <target name="doc" description="Generates doxygen">
    <taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask" classpathref="doxygen.classpath" />
  	<mkdir dir="${dist.dir}/doxygen" />
  	<mkdir dir="${dist.dir}/javadoc" />
    <doxygen configFilename="doxygen/beast_doxygen.cfg"/>
	<javadoc packagenames="eu.baltrad.*"
	         sourcepath="src"
	         excludepackagenames="com.dummy.test.doc-files.*"
	         defaultexcludes="yes"
	         destdir="${dist.dir}/javadoc"
	         author="true"
	         version="true"
	         use="true"
	         windowtitle="Beast API">
        <classpath refid="lib.path"/>
        <doctitle><![CDATA[<h1>Beast API</h1>]]></doctitle>
        <bottom><![CDATA[<i>Copyright 2010 Swedish Meteorological and Hydrological Institute.</i>]]></bottom>
        <tag name="todo" scope="all" description="To do:"/>
        <group title="Adaptors" packages="eu.baltrad.beast.adaptor*"/>
        <group title="DB" packages="eu.baltrad.beast.db*"/>
        <group title="Messages" packages="eu.baltrad.beast.manager*:eu.baltrad.beast.message*"/>
        <group title="PgFwk" packages="eu.baltrad.beast.pgfwk*"/>
        <group title="Rules" packages="eu.baltrad.beast.router*:eu.baltrad.beast.rules*"/>
        <group title="Scheduler" packages="eu.baltrad.beast.scheduler*"/>
        <link href="http://download.oracle.com/javase/6/docs/api/"/>
      </javadoc>
  </target>
</project>

